import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Minus, Plus, RotateCcw, Target, TrendingDown, Calendar, Sparkles, Award, Zap } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface PuffData {
  date: string;
  count: number;
}

export const PuffTracker = () => {
  const { toast } = useToast();
  const [todaysPuffs, setTodaysPuffs] = useState(0);
  const [weeklyPuffs, setWeeklyPuffs] = useState(0);
  const [isAnimating, setIsAnimating] = useState(false);
  
  const today = new Date().toDateString();

  // Load data from localStorage
  useEffect(() => {
    const savedData = localStorage.getItem('puffTracker');
    if (savedData) {
      const data: PuffData[] = JSON.parse(savedData);
      const todayData = data.find(d => d.date === today);
      setTodaysPuffs(todayData?.count || 0);
      
      // Calculate weekly total
      const oneWeekAgo = new Date();
      oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
      const weeklyTotal = data
        .filter(d => new Date(d.date) >= oneWeekAgo)
        .reduce((sum, d) => sum + d.count, 0);
      setWeeklyPuffs(weeklyTotal);
    }
  }, [today]);

  // Save data to localStorage
  const saveData = (count: number) => {
    const savedData = localStorage.getItem('puffTracker');
    const data: PuffData[] = savedData ? JSON.parse(savedData) : [];
    
    const todayIndex = data.findIndex(d => d.date === today);
    if (todayIndex >= 0) {
      data[todayIndex].count = count;
    } else {
      data.push({ date: today, count });
    }
    
    localStorage.setItem('puffTracker', JSON.stringify(data));
  };

  const addPuff = () => {
    const newCount = todaysPuffs + 1;
    setTodaysPuffs(newCount);
    setWeeklyPuffs(prev => prev + 1);
    saveData(newCount);
    
    setIsAnimating(true);
    setTimeout(() => setIsAnimating(false), 800);

    // Show encouraging or warning messages
    if (newCount === 1) {
      toast({
        title: "First puff tracked today",
        description: "Remember, you're working towards quitting. You've got this! ðŸ’ª",
      });
    } else if (newCount % 5 === 0) {
      toast({
        title: `${newCount} puffs today`,
        description: "Take a moment to breathe. Consider waiting before the next one.",
        variant: "destructive"
      });
    }
  };

  const removePuff = () => {
    if (todaysPuffs > 0) {
      const newCount = todaysPuffs - 1;
      setTodaysPuffs(newCount);
      setWeeklyPuffs(prev => prev - 1);
      saveData(newCount);
    }
  };

  const resetDay = () => {
    setTodaysPuffs(0);
    setWeeklyPuffs(prev => prev - todaysPuffs);
    saveData(0);
    toast({
      title: "Day reset",
      description: "Fresh start! Every moment is a chance to choose differently.",
    });
  };

  const getPuffStatus = () => {
    if (todaysPuffs === 0) return { 
      color: 'success', 
      message: 'Vape-free today!', 
      icon: Award,
      gradient: 'bg-gradient-success',
      shadow: 'shadow-success'
    };
    if (todaysPuffs <= 5) return { 
      color: 'accent', 
      message: 'Doing well', 
      icon: Sparkles,
      gradient: 'bg-gradient-secondary',
      shadow: 'shadow-accent'
    };
    if (todaysPuffs <= 10) return { 
      color: 'warning', 
      message: 'Be mindful', 
      icon: Zap,
      gradient: 'bg-gradient-warning',
      shadow: 'shadow-warning'
    };
    return { 
      color: 'destructive', 
      message: 'Take a break', 
      icon: Target,
      gradient: 'bg-gradient-destructive',
      shadow: 'shadow-destructive'
    };
  };

  const status = getPuffStatus();
  const dailyAverage = weeklyPuffs > 0 ? Math.round(weeklyPuffs / 7) : 0;

  return (
    <div className="min-h-screen bg-gradient-background p-4 relative overflow-hidden">
      {/* Animated background elements */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        <div className="absolute top-20 left-10 w-32 h-32 bg-primary/10 rounded-full blur-xl animate-float"></div>
        <div className="absolute bottom-32 right-10 w-40 h-40 bg-accent/10 rounded-full blur-xl animate-float" style={{animationDelay: '1s'}}></div>
        <div className="absolute top-1/2 left-1/4 w-24 h-24 bg-success/10 rounded-full blur-xl animate-float" style={{animationDelay: '2s'}}></div>
      </div>

      <div className="max-w-md mx-auto space-y-8 pt-8 relative z-10">
        {/* Header */}
        <div className="text-center space-y-4">
          <div className="inline-flex items-center justify-center w-16 h-16 bg-gradient-primary rounded-full shadow-glow mb-4 animate-pulse-glow">
            <Target className="w-8 h-8 text-white" />
          </div>
          <h1 className="text-4xl font-bold bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent">
            Puff Tracker
          </h1>
          <p className="text-muted-foreground text-lg">Track your journey to freedom</p>
        </div>

        {/* Main Tracking Card */}
        <Card className="p-8 bg-gradient-card shadow-soft border border-border/50 backdrop-blur-sm text-center space-y-8 relative overflow-hidden">
          {/* Background shimmer effect */}
          <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/5 to-transparent -translate-x-full animate-shimmer"></div>
          
          <div className="space-y-6 relative z-10">
            <div className="space-y-4">
              <p className="text-sm text-muted-foreground font-medium">Today's Puffs</p>
              <div className={`text-7xl font-bold transition-all duration-500 ${
                isAnimating ? 'animate-bounce-gentle text-accent' : 'text-foreground'
              }`}>
                {todaysPuffs}
              </div>
              <Badge 
                className={`${status.gradient} ${status.shadow} text-white font-semibold px-4 py-2 text-sm animate-glow-pulse border-0`}
              >
                <status.icon className="w-4 h-4 mr-2" />
                {status.message}
              </Badge>
            </div>

            {/* Main Action Button */}
            <div className="relative z-20">
              <Button
                onClick={addPuff}
                size="lg"
                className="w-36 h-36 rounded-full text-xl font-bold bg-gradient-primary hover:shadow-glow transition-all duration-300 hover:scale-105 active:scale-95 border-2 border-white/20 cursor-pointer z-30"
              >
                <Plus className="w-10 h-10" />
              </Button>
              {todaysPuffs === 0 && (
                <div className="absolute -inset-4 bg-success/20 rounded-full animate-pulse-glow -z-10"></div>
              )}
            </div>
            
            <p className="text-sm text-muted-foreground font-medium">Tap to log a puff</p>
          </div>

          {/* Controls */}
          <div className="flex justify-center gap-4 relative z-10">
            <Button
              variant="outline"
              size="sm"
              onClick={removePuff}
              disabled={todaysPuffs === 0}
              className="bg-secondary/50 border-border hover:bg-secondary hover:shadow-soft transition-all duration-300"
            >
              <Minus className="w-4 h-4" />
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={resetDay}
              disabled={todaysPuffs === 0}
              className="bg-secondary/50 border-border hover:bg-secondary hover:shadow-soft transition-all duration-300"
            >
              <RotateCcw className="w-4 h-4" />
            </Button>
          </div>
        </Card>

        {/* Stats Cards */}
        <div className="grid grid-cols-2 gap-6">
          <Card className="p-6 bg-gradient-card shadow-soft border border-border/50 backdrop-blur-sm text-center hover:shadow-accent transition-all duration-300 group">
            <div className="space-y-3">
              <div className="inline-flex items-center justify-center w-12 h-12 bg-gradient-secondary rounded-full group-hover:shadow-accent transition-all duration-300">
                <Calendar className="w-6 h-6 text-white" />
              </div>
              <p className="text-sm text-muted-foreground font-medium">This Week</p>
              <p className="text-3xl font-bold text-foreground">{weeklyPuffs}</p>
            </div>
          </Card>
          
          <Card className="p-6 bg-gradient-card shadow-soft border border-border/50 backdrop-blur-sm text-center hover:shadow-warning transition-all duration-300 group">
            <div className="space-y-3">
              <div className="inline-flex items-center justify-center w-12 h-12 bg-gradient-warning rounded-full group-hover:shadow-warning transition-all duration-300">
                <TrendingDown className="w-6 h-6 text-white" />
              </div>
              <p className="text-sm text-muted-foreground font-medium">Daily Avg</p>
              <p className="text-3xl font-bold text-foreground">{dailyAverage}</p>
            </div>
          </Card>
        </div>

        {/* Motivational Section */}
        <Card className="p-8 bg-gradient-card shadow-soft border border-border/50 backdrop-blur-sm relative overflow-hidden">
          <div className="absolute inset-0 bg-gradient-to-r from-primary/5 via-accent/5 to-success/5"></div>
          <div className="text-center space-y-4 relative z-10">
            <div className="inline-flex items-center justify-center w-14 h-14 bg-gradient-primary rounded-full shadow-glow">
              <Target className="w-7 h-7 text-white" />
            </div>
            <h3 className="font-bold text-lg text-foreground">Your Quit Journey</h3>
            <p className="text-sm text-muted-foreground leading-relaxed">
              Every tracked puff is progress toward awareness. 
              {todaysPuffs === 0 ? 
                " You're crushing it today - this momentum is powerful! ðŸŒŸ" :
                " Notice the patterns, be kind to yourself, and remember your 'why'."
              }
            </p>
            {todaysPuffs === 0 && (
              <div className="inline-flex items-center gap-2 px-4 py-2 bg-gradient-success rounded-full text-white font-medium text-sm shadow-success">
                <Award className="w-4 h-4" />
                <span>Clean Day Achieved!</span>
              </div>
            )}
          </div>
        </Card>
      </div>
    </div>
  );
};
